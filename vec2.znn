
export import "direction.znn";
import "std/io.znn";
import "std/enum.znn";
import "std/math.znn";

export struct Vec2 {
  int x;
  int y;
};

export Vec2(int x, int y) = default;

export Vec2(Direction dir) {
  switch (dir) {
    case (N) { return Vec2(0, -1); }
    case (E) { return Vec2(1, 0); }
    case (S) { return Vec2(0, 1); }
    case (W) { return Vec2(-1, 0); }
    case (NW) { return Vec2(-1, -1); }
    case (NE) { return Vec2(1, -1); }
    case (SW) { return Vec2(-1, 1); }
    case (SE) { return Vec2(1, 1); }
  }
}

export Vec2(Direction4 dir) {
  switch (dir) {
    case (N) { return Vec2(0, -1); }
    case (E) { return Vec2(1, 0); }
    case (S) { return Vec2(0, 1); }
    case (W) { return Vec2(-1, 0); }
  }
}

export Direction4? getDir4(Vec2* v) {
  for (e : enum_range<Direction4>())
    if (Vec2(*e) == *v)
      return *e;
  return null;
}

export Vec2 operator + (Vec2* a, Vec2* b) {
  return Vec2(a->x + b->x, a->y + b->y);
}

export Vec2 operator / (Vec2* a, int* b) {
  return Vec2(a->x / *b, a->y / *b);
}

export Vec2 operator * (Vec2* a, int* b) {
  return Vec2(a->x * *b, a->y * *b);
}

export Vec2 operator - (Vec2* a, Vec2* b) {
  return Vec2(a->x - b->x, a->y - b->y);
}

export bool operator == (Vec2* a, Vec2* b) {
  return a->x == b->x && a->y == b->y;
}

export Vec2 implicit_copy(Vec2*) = default;

export string to_string(Vec2* v) {
  return "(" + to_string(&v->x) + ", " + to_string(&v->y) + ")";
}

export double lengthD(Vec2* v) {
  return sqrt(v->x * v->x + v->y * v->y);
}
